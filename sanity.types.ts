// Query TypeMap
import '@sanity/client';

/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch';
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: 'sanity.imagePalette';
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions';
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type Geopoint = {
  _type: 'geopoint';
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: 'slug';
  current?: string;
  source?: string;
};

export type IconWithText = {
  _type: 'iconWithText';
  icon?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  url?: string;
};

export type SectionHeader = {
  _type: 'sectionHeader';
  mainHeader?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
  backgroundHeader?: string;
};

export type Settings = {
  _id: string;
  _type: 'settings';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  overview?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal';
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
  logo?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  menuItems?: Array<
    | {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        _key: string;
        [internalGroqTypeReferenceTo]?: 'home';
      }
    | {
        icon?: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.fileAsset';
          };
          _type: 'file';
        };
        title?: string;
        anchorId?: string;
        _type: 'anchorMenuItem';
        _key: string;
      }
  >;
  socialIcons?: Array<
    {
      _key: string;
    } & IconWithText
  >;
  footer?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
};

export type Home = {
  _id: string;
  _type: 'home';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  heroSection?: HeroSection;
  aboutSection?: AboutSection;
  educationSection?: EducationSection;
  experienceSection?: ExperienceSection;
  skillsSection?: SkillsSection;
  resumeCTASection?: ResumeCTASection;
  contactSection?: ContactSection;
};

export type ContactSection = {
  _type: 'contactSection';
  sectionId?: string;
  sectionHeader?: SectionHeader;
  content?: string;
  contactDetails?: Array<
    {
      _key: string;
    } & IconWithText
  >;
};

export type SanityFileAsset = {
  _id: string;
  _type: 'sanity.fileAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type ResumeCTASection = {
  _type: 'resumeCTASection';
  ctaContent?: string;
  ctaButton?: string;
  buttonLink?: string;
  downloadFile?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.fileAsset';
    };
    _type: 'file';
  };
};

export type SkillsSection = {
  _type: 'skillsSection';
  sectionHeader?: SectionHeader;
  skillsList?: Array<
    {
      _key: string;
    } & IconWithText
  >;
};

export type ExperienceSection = {
  _type: 'experienceSection';
  sectionHeader?: SectionHeader;
  experienceList?: Array<{
    jobPosition?: string;
    workStartDate?: string;
    workEndDate?: string;
    companyName?: string;
    companyLogo?: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    };
    _key: string;
  }>;
};

export type EducationSection = {
  _type: 'educationSection';
  sectionId?: string;
  sectionHeader?: SectionHeader;
  eduList?: Array<{
    degree?: string;
    graduationDate?: string;
    content?: string;
    _key: string;
  }>;
};

export type AboutSection = {
  _type: 'aboutSection';
  sectionId?: string;
  sectionHeader?: SectionHeader;
  content?: string;
  cta?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  imageCaption?: string;
};

export type SanityImageCrop = {
  _type: 'sanity.imageCrop';
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot';
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: 'sanity.imageAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData';
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata';
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type HeroSection = {
  _type: 'heroSection';
  sectionId?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  header?: string;
  profession?: Array<string>;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | Geopoint
  | Slug
  | IconWithText
  | SectionHeader
  | Settings
  | Home
  | ContactSection
  | SanityFileAsset
  | ResumeCTASection
  | SkillsSection
  | ExperienceSection
  | EducationSection
  | AboutSection
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | HeroSection;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/query/aboutMeSectionQuery.ts
// Variable: aboutSectionQuery
// Query: *[_type == "home"][0]['aboutSection']{    _id,    sectionId,    sectionHeader {      mainHeader,      backgroundHeader    },    content,    cta,    image,    imageCaption  }
export type AboutSectionQueryResult = {
  _id: null;
  sectionId: string | null;
  sectionHeader: {
    mainHeader: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }> | null;
    backgroundHeader: string | null;
  } | null;
  content: string | null;
  cta: string | null;
  image: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  } | null;
  imageCaption: string | null;
} | null;

// Source: ./src/sanity/query/educationSectionQuery.ts
// Variable: educationSectionQuery
// Query: *[_type == "home"][0]['educationSection']{    _id,    sectionId,    sectionHeader {      mainHeader,      backgroundHeader    },    eduList[] {      _key,      degree,      graduationDate,      content,    },  }
export type EducationSectionQueryResult = {
  _id: null;
  sectionId: string | null;
  sectionHeader: {
    mainHeader: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }> | null;
    backgroundHeader: string | null;
  } | null;
  eduList: Array<{
    _key: string;
    degree: string | null;
    graduationDate: string | null;
    content: string | null;
  }> | null;
} | null;

// Source: ./src/sanity/query/experienceSectionQuery.ts
// Variable: experienceSectionQuery
// Query: *[_type == "home"][0]['experienceSection']{    _id,    sectionId,    sectionHeader {      mainHeader,      backgroundHeader    },    experienceList[] {      _key,      jobPosition,      workStartDate,      workEndDate,      companyName,      companyLogo,      "logoDimensions": companyLogo.asset->metadata.dimensions    },  }
export type ExperienceSectionQueryResult = {
  _id: null;
  sectionId: null;
  sectionHeader: {
    mainHeader: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }> | null;
    backgroundHeader: string | null;
  } | null;
  experienceList: Array<{
    _key: string;
    jobPosition: string | null;
    workStartDate: string | null;
    workEndDate: string | null;
    companyName: string | null;
    companyLogo: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
    logoDimensions: SanityImageDimensions | null;
  }> | null;
} | null;

// Source: ./src/sanity/query/footerInfoQuery.ts
// Variable: footerInfoQuery
// Query: *[_type == "settings"][0]{    _id,    _type,    footer,  }
export type FooterInfoQueryResult = {
  _id: string;
  _type: 'settings';
  footer: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }> | null;
} | null;

// Source: ./src/sanity/query/heroSectionQuery.ts
// Variable: heroSectionQuery
// Query: *[_type == "home"][0]['heroSection']{    _id,    sectionId,    image,    header,    profession  }
export type HeroSectionQueryResult = {
  _id: null;
  sectionId: string | null;
  image: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  } | null;
  header: string | null;
  profession: Array<string> | null;
} | null;

// Source: ./src/sanity/query/metadataQuery.ts
// Variable: metadataQuery
// Query: *[_type == "settings"][0]{    _id,    _type,    title,    overview,    ogImage,    footer,  }
export type MetadataQueryResult = {
  _id: string;
  _type: 'settings';
  title: string | null;
  overview: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal';
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }> | null;
  ogImage: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  } | null;
  footer: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }> | null;
} | null;

// Source: ./src/sanity/query/navbarQuery.ts
// Variable: navbarQuery
// Query: *[_type == "settings"][0]{    _id,    _type,    logo,    menuItems[]{      _key,      _type == "anchorMenuItem" => {        _type,        "iconURL": icon.asset->url,        title,        anchorId      },      // fallback for references      _type != "anchorMenuItem" => {        "_type": @->_type,        "slug": @->slug.current,        "title": @->title      }    }  }
export type NavbarQueryResult = {
  _id: string;
  _type: 'settings';
  logo: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  } | null;
  menuItems: Array<
    | {
        _key: string;
        _type: 'anchorMenuItem';
        iconURL: string | null;
        title: string | null;
        anchorId: string | null;
      }
    | {
        _key: string;
        _type: 'home';
        slug: null;
        title: null;
      }
  > | null;
} | null;

// Source: ./src/sanity/query/skillsSectionQuery.ts
// Variable: skillsSectionQuery
// Query: *[_type == "home"][0]['skillsSection']{    _id,    sectionId,    sectionHeader {      mainHeader,      backgroundHeader    },    skillsList[] {      _key,      "iconURL": icon.asset->url,      url    },  }
export type SkillsSectionQueryResult = {
  _id: null;
  sectionId: null;
  sectionHeader: {
    mainHeader: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }> | null;
    backgroundHeader: string | null;
  } | null;
  skillsList: Array<{
    _key: string;
    iconURL: string | null;
    url: string | null;
  }> | null;
} | null;

// Source: ./src/sanity/query/socialIconsQuery.ts
// Variable: socialIconsQuery
// Query: *[_type == "settings"][0]{    _id,    _type,    socialIcons[]{      _key,      "iconURL": icon.asset->url,      url    },  }
export type SocialIconsQueryResult = {
  _id: string;
  _type: 'settings';
  socialIcons: Array<{
    _key: string;
    iconURL: string | null;
    url: string | null;
  }> | null;
} | null;

declare module '@sanity/client' {
  interface SanityQueries {
    '\n  *[_type == "home"][0][\'aboutSection\']{\n    _id,\n    sectionId,\n    sectionHeader {\n      mainHeader,\n      backgroundHeader\n    },\n    content,\n    cta,\n    image,\n    imageCaption\n  }\n': AboutSectionQueryResult;
    '\n  *[_type == "home"][0][\'educationSection\']{\n    _id,\n    sectionId,\n    sectionHeader {\n      mainHeader,\n      backgroundHeader\n    },\n    eduList[] {\n      _key,\n      degree,\n      graduationDate,\n      content,\n    },\n  }\n': EducationSectionQueryResult;
    '\n  *[_type == "home"][0][\'experienceSection\']{\n    _id,\n    sectionId,\n    sectionHeader {\n      mainHeader,\n      backgroundHeader\n    },\n    experienceList[] {\n      _key,\n      jobPosition,\n      workStartDate,\n      workEndDate,\n      companyName,\n      companyLogo,\n      "logoDimensions": companyLogo.asset->metadata.dimensions\n    },\n  }\n': ExperienceSectionQueryResult;
    '\n  *[_type == "settings"][0]{\n    _id,\n    _type,\n    footer,\n  }\n': FooterInfoQueryResult;
    '\n  *[_type == "home"][0][\'heroSection\']{\n    _id,\n    sectionId,\n    image,\n    header,\n    profession\n  }\n': HeroSectionQueryResult;
    '\n  *[_type == "settings"][0]{\n    _id,\n    _type,\n    title,\n    overview,\n    ogImage,\n    footer,\n  }\n': MetadataQueryResult;
    '\n  *[_type == "settings"][0]{\n    _id,\n    _type,\n    logo,\n    menuItems[]{\n      _key,\n      _type == "anchorMenuItem" => {\n        _type,\n        "iconURL": icon.asset->url,\n        title,\n        anchorId\n      },\n      // fallback for references\n      _type != "anchorMenuItem" => {\n        "_type": @->_type,\n        "slug": @->slug.current,\n        "title": @->title\n      }\n    }\n  }\n': NavbarQueryResult;
    '\n  *[_type == "home"][0][\'skillsSection\']{\n    _id,\n    sectionId,\n    sectionHeader {\n      mainHeader,\n      backgroundHeader\n    },\n    skillsList[] {\n      _key,\n      "iconURL": icon.asset->url,\n      url\n    },\n  }\n': SkillsSectionQueryResult;
    '\n  *[_type == "settings"][0]{\n    _id,\n    _type,\n    socialIcons[]{\n      _key,\n      "iconURL": icon.asset->url,\n      url\n    },\n  }\n': SocialIconsQueryResult;
  }
}
